#+STARTUP: overview
#+TITLE: Mr Speaker's Emacs
#+CREATOR: Mr Speaker
#+LANGUAGE: en
#+OPTIONS: num:nil
#+ATTR_HTML: :style margin-left: auto; margin-right: auto;

* Overview
=init.el= but in an org file. Stolen from [[https://github.com/daedreth/UncleDavesEmacs][Uncle Dave's Emacs]].

** Set load paths

#+BEGIN_SRC emacs-lisp
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
(add-to-list 'load-path "~/.emacs.d/themes/")
(add-to-list 'load-path "~/.emacs.d/lisp/")
#+END_SRC

* Basic Interface Settings
These are setting that do not depend on packages and are built-in enhancements to the UI.

** Look n feel
*** Remove startup screen
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC

*** Set menus and scrollbars
Choose to set or hide by changing =-1= to =1=.
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(menu-bar-mode 1)
(scroll-bar-mode -1)
#+END_SRC

*** Disable bell
Quiet, please! No dinging!
#+BEGIN_SRC emacs-lisp
  (setq visible-bell nil
        ring-bell-function 'flash-mode-line)
  (defun flash-mode-line ()
    ;(invert-face 'mode-line)
    ;(run-with-timer 0.1 nil #'invert-face 'mode-line))
    (set-face-foreground 'mode-line "#F2804F")
    (let ((orig-fg (face-foreground 'mode-line)))
      (run-with-idle-timer 0.1 nil
                           (lambda (fg) (set-face-foreground 'mode-line fg))
                           orig-fg)))
#+END_SRC

*** Line-wrap icons on right side only.
#+BEGIN_SRC emacs-lisp
(setf (cdr (assq 'continuation fringe-indicator-alist))
			'(nil right-curly-arrow)
			)
#+END_SRC

*** Set UTF-8 encoding
#+BEGIN_SRC emacs-lisp 
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC

*** Clock
If you prefer the 12hr-format, change the variable to =nil= instead of =t=.

**** Time format
#+BEGIN_SRC emacs-lisp
  (setq display-time-24hr-format t)
  (setq display-time-format "%H:%M")
#+END_SRC

**** Enabling the mode
This turns on the clock globally.
#+BEGIN_SRC emacs-lisp
  (display-time-mode 1)
#+END_SRC

** TODO: All the things - unsorted and unorganised
#+BEGIN_SRC emacs-lisp
(require 're-builder)
(setq reb-re-syntax 'string)

; Keybinds
(global-set-key (kbd "C-;") 'other-window)
(global-set-key (kbd "M-;") (lambda() (interactive) (other-window -1)))
(global-set-key (kbd "M-[") 'previous-buffer)
(global-set-key (kbd "M-]") 'next-buffer)

;(define-key flyspell-mode-map (kbd "C-;") nil) ; unbind in flyspell

(global-set-key (kbd "M-\"") 'insert-pair) ;Wrap quotes
(global-set-key (kbd "C-x g") 'magit-status)
;(define-key org-mode-map "M-q" 'toggle-truncate-lines)
(global-set-key [remap dabbrev-expand] 'hippie-expand)

; Tabs. TODO: which of these does stuff?!
(setq-default indent-tabs-mode nil)
(setq-default js2-tab-width 2)
(setq-default tab-width 2)
(setq-default js2-basic-offset 2)
(setq js-indent-level 2)

; Font
(setq-default line-spacing 0.12)

; Dired
(setq dired-dwim-target t)
(add-hook 'dired-mode-hook
          (lambda()
            (dired-hide-details-mode))) ; Hide dired detailsn
(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)

; neotree
(add-to-list 'load-path "~/.emacs.d/lisp/emacs-neotree")
(require 'neotree)
(global-set-key [f8] 'neotree-toggle)
(setq neo-theme (if (display-graphic-p) 'icons 'arrow))
(setq neo-smart-open t)

; y/n instead of yes/no
(fset 'yes-or-no-p 'y-or-n-p)

;;; backup/autosave
(defvar backup-dir (expand-file-name "~/.emacs.d/backups/"))
(defvar autosave-dir (expand-file-name "~/.emacs.d/autosave/"))
(setq backup-directory-alist (list (cons ".*" backup-dir)))
(setq auto-save-list-file-prefix autosave-dir)
(setq auto-save-file-name-transforms `((".*" ,autosave-dir t)))

;;  Modes

;; Ido
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)
(setq ido-create-new-buffer 'always)
(setq ido-use-filename-at-point 'guess)

;; Hooks
(add-hook 'text-mode-hook 'turn-on-visual-line-mode)

;; (add-hook 'prog-mode-hook 'linum-mode)
(require 'web-mode)
(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
(add-to-list 'auto-mode-alist '("\\.jsx\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.tsx\\'" . typescript-mode))

;(eval-after-load 'flycheck
;  '(add-hook 'flycheck-mode-hook #'flycheck-typescript-tslint-setup))

(setq flycheck-javascript-eslint-executable "/home/mrspeaker/.nvm/versions/node/v11.1.0/bin/eslint")
;(setq flycheck-javascript-tslint-executable "/home/mrspeaker/.nvm/versions/node/v11.1.0/bin/tslint")

; TIDE
(defun setup-tide-mode ()
  (interactive)
  (tide-setup)
  (flycheck-mode +1)
  (setq flycheck-check-syntax-automatically '(save mode-enabled))
  (eldoc-mode +1)
  (tide-hl-identifier-mode +1)
  ;; company is an optional dependency. You have to
  ;; install it separately via package-install
  ;; `M-x package-install [ret] company`
  (company-mode +1))

;; aligns annotation to the right hand side
(setq company-tooltip-align-annotations t)

;; (add-hook 'before-save-hook 'tide-format-before-save) - oh nope - bad formating.
(add-hook 'typescript-mode-hook #'setup-tide-mode)

(add-hook 'web-mode-hook
          (lambda ()
            (when (string-equal "tsx" (file-name-extension buffer-file-name))
              (setup-tide-mode))))
(add-hook 'web-mode-hook
          (lambda ()
            (when (string-equal "jsx" (file-name-extension buffer-file-name))
              (setup-tide-mode))))

;; (flycheck-add-mode 'javascript-eslint 'web-mode) - check this - no such thing?
; (flycheck-add-next-checker 'javascript-eslint 'jsx-tide 'append)
; (flycheck-add-mode 'typescript-tslint 'web-mode)
(add-hook 'js2-mode-hook (lambda ()
                           (tern-mode)
                           (company-mode)))

(require 'prettier-js)
(setq prettier-js-command "/home/mrspeaker/.nvm/versions/node/v11.1.0/bin/prettier")
(add-hook 'js2-mode-hook (lambda()
                           (prettier-js-mode)
                           ))
(add-hook 'typescript-mode-hook (lambda()
                           (prettier-js-mode)
                           ))
;(add-hook 'web-mode-hook 'prettier-js-mode)
;(add-hook 'js2-mode-hook 'flow-minor-enable-automatically)

(add-hook 'after-init-hook #'global-flycheck-mode)
(add-hook 'after-init-hook
          (lambda ()
            (progn
              (whole-line-or-region-global-mode)
              (when (fboundp 'auto-dim-other-buffers-mode)
                (auto-dim-other-buffers-mode t)))))

(require 'sunshine) ; Weather: sunshine-forecast

(require 'yasnippet)
(yas-global-mode 1)

; erc
(setq erc-lurker-hide-list '("JOIN" "PART" "QUIT"))
(setq erc-lurker-threshold-time 3600)


(desktop-save-mode 1) ; Save layout/open files
;; note: this didn't save layout until I customised: '(desktop-save (quote ask-if-new))

(delete-selection-mode 1) ; Overwrite current text selection

(global-set-key (kbd "<mouse-3>") 'mouse-major-mode-menu)
(global-set-key (kbd "<C-mouse-3>") 'mouse-popup-menubar)

(require 'expand-region)
(global-set-key (kbd "C-'") 'er/expand-region)

(put 'narrow-to-region 'disabled nil) ; TODO: why?
(put 'dired-find-alternate-file 'disabled nil) ; TODO: why?

;; Move lines up/down with M-p and M-n
(defun move-line-up ()
  "Move up the current line."
  (interactive)
  (transpose-lines 1)
  (forward-line -2)
  (indent-according-to-mode))

(defun move-line-down ()
  "Move down the current line."
  (interactive)
  (forward-line 1)
  (transpose-lines 1)
  (forward-line -1)
  (indent-according-to-mode))

(global-set-key (kbd "M-p")  'move-line-up)
(global-set-key (kbd "M-n")  'move-line-down)

; Reddit Mode
(setq md4rd-subs-active '(gamedev emacs orgmode spacex))

; Repeatedly use C-spc after C-u spc to cycle through mark ring
(setq set-mark-command-repeat-pop t)
(global-set-key [remap upcase-region] 'ignore)  ; because it triggers whenever i typo c-x u
(global-set-key [remap org-cycle-agenda-files] 'ignore) ; tmp - same keybind as expand rgion above
; (global-set-key [remap flyspell-autocorrect-previous-word] 'ignore)

;;; ; tmp - same keybind as expand rgion above

(message "Done.")
#+END_SRC


* Org mode
Settings for Org mode

** Basic setup
*** Don't smash frames
#+BEGIN_SRC emacs-lisp
(setq org-agenda-window-setup 'current-window)
#+END_SRC

*** Set TODO keywords
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO" "WIP" "DONE")))
#+END_SRC

*** Babel exec code
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '(
   (js . t)
   ))
(setq org-src-fontify-natively t) ; syntax highlight
(setq org-confirm-babel-evaluate nil) ; don't ask to exec
(setq org-src-tab-acts-natively t) ; tab in code blocks
#+END_SRC

** Org-capture
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c c") 'org-capture)
(setq org-default-notes-file "~/notes/organizer.org")

(setq org-capture-templates
      '(("t" "Personal Task" entry
         (file+headline org-default-notes-file "Tasks")
         "* TODO %? %u")
        ("w" "Work-related Task" entry
         (file+headline "~/notes/mt/work.org" "New")
         "* TODO %? %u")
        ("r" "Read later" entry
         (file+headline org-default-notes-file "Read Later")
         "* TODO %?\n%u - %c")
        ("g" "game idea" entry
         (file "~/notes/gameideas.org")
         "* %? %u")
        ("i" "random idea" entry
         (file "~/notes/ideas.org")
         "* %? %u")))
#+END_SRC
