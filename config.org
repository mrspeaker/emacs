#+STARTUP: overview
#+TITLE: Mr Speaker's Emacs
#+CREATOR: Mr Speaker
#+LANGUAGE: en
#+OPTIONS: num:nil
#+ATTR_HTML: :style margin-left: auto; margin-right: auto;

* Overview
Emacs =init.el=, but in an org file. Idea (and code) stolen from [[https://github.com/daedreth/UncleDavesEmacs][Uncle Dave's Emacs]].

** Set load paths
#+BEGIN_SRC emacs-lisp
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
(add-to-list 'load-path "~/.emacs.d/themes/")
(add-to-list 'load-path "~/.emacs.d/lisp/")
#+END_SRC

** TODO: All the things - unsorted and unorganised
#+BEGIN_SRC emacs-lisp
  (require 're-builder)
  (setq reb-re-syntax 'string)

  ; Use source if newer than byte-complied version
  (setq load-prefer-newer t)

  ; Tabs. TODO: which of these does stuff?!
  (setq-default indent-tabs-mode nil)
  (setq-default js2-tab-width 2)
  (setq-default tab-width 2)
  (setq-default js2-basic-offset 2)
  (setq js-indent-level 2)

  ;;; backup/autosave
  (defvar backup-dir (expand-file-name "~/.emacs.d/backups/"))
  (defvar autosave-dir (expand-file-name "~/.emacs.d/autosave/"))
  (setq backup-directory-alist (list (cons ".*" backup-dir)))
  (setq auto-save-list-file-prefix autosave-dir)
  (setq auto-save-file-name-transforms `((".*" ,autosave-dir t)))

  ;;  Modes

  ;; Ido
  (setq ido-everywhere t)
  (setq ido-enable-flex-matching t)
  (ido-mode 1)
  (setq ido-create-new-buffer 'always)
  (setq ido-use-filename-at-point 'guess)

  ;; Hooks
  (add-hook 'text-mode-hook 'turn-on-visual-line-mode)

  (require 'sunshine) ; Weather: sunshine-forecast

  (use-package expand-region
    :ensure t
    :bind ("C-'" . er/expand-region))
  ; This was the old keybind: (global-set-key (kbd "C-'") 'er/expand-region)
  ; Todo: this makes the command "ignore", but doens't run expand region in orgfile
  (global-set-key [remap org-cycle-agenda-files] 'ignore) ; tmp - same keybind as expand rgion above

#+END_SRC

* Basic Interface Settings
These are setting that do not depend on packages and are built-in enhancements to the UI.

** Look n feel
*** Remove startup screen
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC

*** Set menus and scrollbars
Choose to set or hide by changing =-1= to =1=.
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)

  ;; messing with mac title bar
  (when (memq window-system '(mac ns))
    (add-to-list 'default-frame-alist '(ns-appearance . dark)) ; nil for dark text
    (add-to-list 'default-frame-alist '(ns-transparent-titlebar . nil)))

  (set-face-attribute 'fringe nil :background nil)
#+END_SRC

*** Load the theme
#+BEGIN_SRC emacs-lisp
;(use-package gruvbox-theme
; :ensure t
; :init
;  (load-theme 'gruvbox-light-hard))
#+END_SRC

*** Fonts
Set the default line height
#+BEGIN_SRC emacs-lisp
  (setq-default line-spacing 0.15)
#+END_SRC

*** Misc (TODO: sort)
#+BEGIN_SRC emacs-lisp

  (desktop-save-mode 1) ; Save layout/open files
  ;; note: this didn't save layout until I customised: '(desktop-save (quote ask-if-new))

  (delete-selection-mode 1) ; Overwrite current text selection

  ; Repeatedly use C-spc after C-u spc to cycle through mark ring
  (setq set-mark-command-repeat-pop t)

  ; y/n instead of yes/no
  (fset 'yes-or-no-p 'y-or-n-p)

#+END_SRC

*** Disable bell
Quiet, please! No dinging!
#+BEGIN_SRC emacs-lisp
  (setq visible-bell nil
        ring-bell-function 'flash-mode-line)
  (defun flash-mode-line ()
    ;(invert-face 'mode-line)
    ;(run-with-timer 0.1 nil #'invert-face 'mode-line))
    (let ((orig-fg (face-foreground 'mode-line)))
      (set-face-foreground 'mode-line "#F2804F")
      (run-with-idle-timer 0.1 nil
                           (lambda (fg) (set-face-foreground 'mode-line fg))
                           orig-fg)))
#+END_SRC

*** Line-wrap icons on right side only.
#+BEGIN_SRC emacs-lisp
  (setf (cdr (assq 'continuation fringe-indicator-alist))
        '(nil right-curly-arrow)
        )
#+END_SRC

*** Whole line or region
#+BEGIN_SRC emacs-lisp
  (use-package whole-line-or-region
    :ensure t
    :init
    (add-hook 'after-init-hook 'whole-line-or-region-global-mode))
#+END_SRC
*** Set UTF-8 encoding
#+BEGIN_SRC emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC

*** Clock
If you prefer the 12hr-format, change the variable to =nil= instead of =t=.

**** Time format
#+BEGIN_SRC emacs-lisp
  (setq display-time-24hr-format t)
  (setq display-time-format "%H:%M")
#+END_SRC

**** Enabling the mode
This turns on the clock globally.
#+BEGIN_SRC emacs-lisp
  (display-time-mode 1)
#+END_SRC

** Keybinds
#+BEGIN_SRC emacs-lisp
  ; Keybinds
  (global-set-key (kbd "C-;") 'other-window)
  (global-set-key (kbd "M-;") (lambda() (interactive) (other-window -1)))
  (global-set-key (kbd "M-[") 'previous-buffer)
  (global-set-key (kbd "M-]") 'next-buffer)
  ;(define-key flyspell-mode-map (kbd "C-;") nil) ; unbind in flyspell
  (global-set-key (kbd "M-\"") 'insert-pair) ;Wrap quotes
  (global-set-key (kbd "C-x g") 'magit-status)
  ;(define-key org-mode-map "M-q" 'toggle-truncate-lines)
  (global-set-key [remap dabbrev-expand] 'hippie-expand)

  ; Company complete
  (global-set-key (kbd "C-M-SPC") 'company-complete)

  ; Whater are thise mouse ones for?
  (global-set-key (kbd "<mouse-3>") 'mouse-major-mode-menu)
  (global-set-key (kbd "<C-mouse-3>") 'mouse-popup-menubar)

  (global-set-key [remap upcase-region] 'ignore)  ; because it triggers whenever i typo c-x u

  (put 'narrow-to-region 'disabled nil) ; TODO: why?
  ; (global-set-key [remap flyspell-autocorrect-previous-word] 'ignore)

  (setq mac-command-modifier 'meta)
  (setq mac-option-modifier nil)
#+END_SRC

** Customizations
#+BEGIN_SRC emacs-lisp
  ;; Move lines up/down with M-p and M-n
  (defun move-line-up ()
    "Move up the current line."
    (interactive)
    (transpose-lines 1)
    (forward-line -2)
    (indent-according-to-mode))

  (defun move-line-down ()
    "Move down the current line."
    (interactive)
    (forward-line 1)
    (transpose-lines 1)
    (forward-line -1)
    (indent-according-to-mode))

  (global-set-key (kbd "M-p")  'move-line-up)
  (global-set-key (kbd "M-n")  'move-line-down)

#+END_SRC

* Enhancements
** All the icons
#+BEGIN_SRC emacs-lisp
; Note: need to run M-x all-the-icons-install-fonts after use-pacakge...
; is there a way to do this automagically?
(use-package all-the-icons :ensure t)
(use-package all-the-icons-dired
  :ensure t
  :init
  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))
#+END_SRC

** Neotree
#+BEGIN_SRC emacs-lisp
; TODO: fork repo, apply my patches, use that.
(use-package neotree
  :ensure t
  :init
  (global-set-key [f8] 'neotree-toggle)
  (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
  (setq neo-smart-open t)
  (setq neo-show-slash-for-folder nil))
#+END_SRC

** Auto dim other buffers
#+BEGIN_SRC emacs-lisp
  (use-package auto-dim-other-buffers
     :ensure t
     :init
     (auto-dim-other-buffers-mode t))
  (custom-set-faces
   '(auto-dim-other-buffers-face ((t (:background "#1a1b1e")))))
#+END_SRC

* Programming
** flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode))

  (defun disable-fylcheck-in-org-src-block ()
    (setq-local flycheck-disabled-checkers '(emacs-lisp-checkdoc)))

  (add-hook 'org-src-mode-hook 'disable-fylcheck-in-org-src-block)
#+END_SRC
** Line numbering & Truncate long lines
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook (lambda ()
                              (linum-mode)
                              (toggle-truncate-lines nil)
                              (subword-mode 1)
                              (set-face-foreground 'linum "#333")))
#+END_SRC

** Web & JS Mode
*** JS2Mode
#+BEGIN_SRC emacs-lisp
(use-package js2-mode
  :ensure t
  :init (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode)))
#+END_SRC

*** Web mode
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :init
      (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.jsx\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.tsx\\'" . typescript-mode)))

#+END_SRC

*** Typescript
#+BEGIN_SRC emacs-lisp
    ; TIDE
    (defun setup-tide-mode ()
      (interactive)
      (tide-setup)
      (flycheck-mode +1)
      (setq flycheck-check-syntax-automatically '(save mode-enabled))
      (eldoc-mode +1)
      (tide-hl-identifier-mode +1)
      (company-mode +1))

  (use-package tide
    :ensure t
    :init
    ; aligns annotation to the right hand side
    (setq company-tooltip-align-annotations t)
    ;; (add-hook 'before-save-hook 'tide-format-before-save) - oh nope - bad formating.
    (add-hook 'typescript-mode-hook #'setup-tide-mode)

    (add-hook 'web-mode-hook
              (lambda ()
                (when (string-equal "tsx" (file-name-extension buffer-file-name))
                  (setup-tide-mode))))
    (add-hook 'web-mode-hook
              (lambda ()
                (when (string-equal "jsx" (file-name-extension buffer-file-name))
                  (setup-tide-mode)))))
#+END_SRC

** Purescript
#+BEGIN_SRC emacs-lisp
  (use-package psc-ide
    :ensure t
    :init
  (add-to-list 'auto-mode-alist '("\\.purs\\'" . purescript-mode))
  (add-hook 'purescript-mode-hook
    (lambda ()
      (psc-ide-mode)
      (company-mode)
      (flycheck-mode)
      (turn-on-purescript-indentation))
      (add-to-list 'write-file-functions 'delete-trailing-whitespace)
      )
  )
#+END_SRC

** Other modes
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode :ensure t)
(use-package php-mode :ensure t)
(use-package lua-mode :ensure t)

(require 'pico8-mode)
#+END_SRC

** Unsorted tings about web programming
#+BEGIN_SRC emacs-lisp

  ; use company, company-tern
  ;(eval-after-load 'flycheck
  ;  '(add-hook 'flycheck-mode-hook #'flycheck-typescript-tslint-setup))

  (setq flycheck-javascript-eslint-executable "/home/mrspeaker/.nvm/versions/node/v11.1.0/bin/eslint")
  ;(setq flycheck-javascript-tslint-executable "/home/mrspeaker/.nvm/versions/node/v11.1.0/bin/tslint")

  ;; ;; (flycheck-add-mode 'javascript-eslint 'web-mode) - check this - no such thing?
  ; (flycheck-add-next-checker 'javascript-eslint 'jsx-tide 'append)
  ; (flycheck-add-mode 'typescript-tslint 'web-mode)
  (add-hook 'js2-mode-hook (lambda ()
                             (tern-mode)
                             (company-mode)))

  ; todo: figure out to make this work: (no-port-file).... (add-hook 'after-init-hook (lambda () (setq tern-command (append tern-command '("--no-port-file")))))

  (use-package prettier-js
    :ensure t
    :init
        (setq prettier-js-command "/home/mrspeaker/.nvm/versions/node/v11.1.0/bin/prettier")
        (add-hook 'js2-mode-hook (lambda() (prettier-js-mode)))
        (add-hook 'typescript-mode-hook (lambda() (prettier-js-mode)))
        (add-hook 'web-mode-hook 'prettier-js-mode))

#+END_SRC

* Dired
Settings for dired

#+BEGIN_SRC emacs-lisp
  ; Dired
  (setq dired-dwim-target t)
  (add-hook 'dired-mode-hook
            (lambda()
              (dired-hide-details-mode))) ; Hide dired detailsn
  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)

  (put 'dired-find-alternate-file 'disabled nil) ; TODO: why?

#+END_SRC

* Org mode
Settings for Org mode

** Basic setup
*** Misc customisations
#+BEGIN_SRC emacs-lisp
 (setq org-agenda-files '("~/work.org"))
 (setq org-startup-indented t)
 (setq org-startup-with-inline-images t)
#+END_SRC

*** Don't smash frames
#+BEGIN_SRC emacs-lisp
(setq org-agenda-window-setup 'current-window)
#+END_SRC

*** Set TODO keywords
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO" "WIP" "DONE")))
#+END_SRC

*** Babel exec code
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '(
   (js . t)
   ))
(setq org-src-fontify-natively t) ; syntax highlight
(setq org-confirm-babel-evaluate nil) ; don't ask to exec
(setq org-src-tab-acts-natively t) ; tab in code blocks
#+END_SRC

** Org-capture
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c c") 'org-capture)
  (setq org-default-notes-file "~/notes/organizer.org")

  (setq org-capture-templates
        '(("t" "Personal Task" entry
           (file+headline org-default-notes-file "Tasks")
           "* TODO %? %u")
          ("w" "Work-related Task" entry
           (file+headline "~/notes/work/work.org" "New")
           "* TODO %? %u")
          ("r" "Read later" entry
           (file+headline org-default-notes-file "Read Later")
           "* TODO %?\n%u - %c")
          ("p" "Peeps" table-line
           (file+headline "~/notes/peeps.org" "New")
           "|%?||")
          ("g" "game idea" entry
           (file "~/notes/gameideas.org")
           "* %? %u")
          ("i" "random idea" entry
           (file "~/notes/ideas.org")
           "* %? %u")))
#+END_SRC

* Apps
** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit :ensure t)
#+END_SRC

** ERC
#+BEGIN_SRC emacs-lisp
  ;; erc
  (setq erc-lurker-hide-list '("JOIN" "PART" "QUIT"))
  (setq erc-lurker-threshold-time 3600)
  (setq erc-server-reconnect-attempts 5)
  (setq erc-server-reconnect-timeout 3)
  ;; Stop displaying channels in the mode line for no good reason.
  (setq erc-track-exclude-types
        '("JOIN" "KICK" "NICK" "PART" "QUIT" "MODE" "333" "353"))
#+END_SRC

* Web sites
** Hacker News
#+BEGIN_SRC emacs-lisp
(use-package hackernews
  :ensure t)
#+END_SRC

** Reddit Mode
#+BEGIN_SRC emacs-lisp
(use-package md4rd
  :ensure t
  :init
  (setq md4rd-subs-active '(emacs gamedev spacex orgmode)))
#+END_SRC

** BTC price
#+BEGIN_SRC emacs-lisp
(defun fetch-btc ()
  "Fetch current BTC price"
  (interactive)
  (shell-command
   "curl https://api-pub.bitfinex.com/v2/ticker/tBTCUSD"
   ))
#+END_SRC
